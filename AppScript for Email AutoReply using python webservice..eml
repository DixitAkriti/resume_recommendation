function postJobEmail(message, subject, semail, sname) {
var url = "http://3.109.208.72:5000/process-job-email";
var headers = {
"Content-Type": "application/json; charset=utf-8",
};
var payload = {
emailData: {
subject: subject,
content: message,
sender: {
email: semail,
name: sname
},
receivedTime: "14/11/2023 19:48:00"
}
};
var options = {
'method' : 'post',
'contentType': 'application/json',
'payload' : JSON.stringify(payload),
'headers': headers,
'muteHttpExceptions': true
};
var response = UrlFetchApp.fetch(url, options);
return response.getContentText();
}
function getAnswerFromResponse(responseText) {
var jsonResponse = JSON.parse(responseText);
var answer = jsonResponse.data.replyMessage.Answer;
return answer;
}
// Function to call GPT-3.5 and determine if the subject is related to a
job opening
async function isJobOpening(subject) {
const prompt = `Analyze the following email subject and determine if it is
related to a job opening position. If yes, provide the role it is looking
for. If not, write "Not a job opening".\n\nSubject: ${subject}\n\nRole: `;
const response = await openai.completePrompt(prompt, { maxTokens: 50 });
return response.choices[0].text.trim();
}
function getDraftTemplate() {
const draftSubject = 'Regarding CaritaTech'; // Replace with your draft
subject
const drafts = GmailApp.search('in:drafts subject:"' + draftSubject + '"');
const draft = drafts[0];
const msg = draft.getMessages()[0]; // Corrected line
return msg;
}
function extractName(email) {
const match = email.match(/(.*)<.*>/);
return match ? match[1].trim() : '';
}
function sendSmartAutoReply() {
Logger.log('sendSmartAutoReply started');
const msgTemplate = getDraftTemplate();
const templateBody = msgTemplate.getBody();
const specificSubject = 'MarkLogic - Data Architect 345'; // Replace with
your desired subject or may need to work on regex if you want to scan
specific emails
// Calculate the date 7 days ago
const sevenDaysAgo = new Date();
sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
const afterDate = sevenDaysAgo.toISOString().slice(0, 10).replace(/-/g, '/'
);
// Get or create the label to mark replied emails
const repliedLabelName = 'Replied by MrR';
let repliedLabel = GmailApp.getUserLabelByName(repliedLabelName);
if (!repliedLabel) {
repliedLabel = GmailApp.createLabel(repliedLabelName);
}
const messages = GmailApp.search(
'subject:"' +
specificSubject +
'" is:unread after:' +
afterDate +
' -label:' +
repliedLabelName
);
Logger.log('Number of messages found: ' + messages.length);
// Get the attachment from Google Drive
const fileId = '1UyFAubijbuYoeag_BbXiy0kKDv7YkYnc';
const file = DriveApp.getFileById(fileId);
const attachment = file.getBlob();
messages.forEach(function (thread) {
const message = thread.getMessages()[0];
const recipientName = extractName(message.getFrom());
const replyToEmail = message.getFrom();
var emailRegex = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi;
var recipientEmail = replyToEmail.match(emailRegex); //"
monica@caritatech.com"
const postJobResponse = postJobEmail(message.getPlainBody(), specificSubject,
recipientEmail, recipientName)
Logger.log(postJobResponse)
const options = {
htmlBody: `<div style="font-family: Arial; white-space: pre-wrap;">${
getAnswerFromResponse(postJobResponse)}</div>`,
attachments: [attachment] // Add the attachment to the email
};
message.reply('', options); // Reply to the same email thread
thread.markRead();

Logger.log('Auto-reply sent to: ' + recipientEmail);
thread.addLabel(repliedLabel);

});
Logger.log('sendSmartAutoReply finished');
}
